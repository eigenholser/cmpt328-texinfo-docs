\input texinfo   @c -*-texinfo-*-

@set title Lab 2: Processor Exceptions
@set subtitle CMPT 328 Computer Architecture
@set splash1 lab_2_processor_exceptions-splash.texi
@set splash2 westminster-splash.texi
@set author Scott Overholser
@set category Laboratory
@set filename lab_2_processor_exceptions

@comment %**start of header
@setchapternewpage off
@setfilename @value{filename}.info
@settitle @value{title}
@finalout
@comment %**end of header

@include @value{filename}.texi.updated
@include copying.texi

@titlepage
@title @value{title}
@subtitle @value{subtitle}
@include @value{splash1}
@author @value{author}

@c Secondary title page.
@page
@include @value{splash2}
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@comment Table of Contents
@contents

@dircategory @value{category}
@direntry
* Texinfo Doc Template         Template for Creating New Docs
@end direntry

@include headings.texi
@include constants.texi

@ifnottex
@node Top
@top @value{title}

@insertcopying
@end ifnottex

@comment This is the Chapter Menu
@menu
* Introduction::            Introduction
* Lab Objective::           Lab Objective
* Notes::                   Notes
* Experiments::             Experiments
* Lab Report::              Lab Report
@end menu

@node Introduction
@chapter Introduction
@noindent
Lab 2 will build on your familiarity with the development environment and
first experience programming the LaunchPad in @uref{https://westminster.instructure.com/courses/1487106/files/folder/Labs?preview=63874338, Lab 1}. It will expand the
complexity and functionality of the programming project.

@node Lab Objective
@chapter Lab Objective
@noindent
In this lab you will learn what processor exceptions are and how they are
handled. The scope will include the following:

@itemize
@item How the processor handles fault conditions.
@item How the processor manages the stack.
@item Understanding vector table in more detail than in @uref{https://westminster.instructure.com/courses/1487106/files/folder/Labs?preview=63874338,Lab 1}.
@item Understanding context switching.
@item Introduce clock gating.
@end itemize

@noindent
You will also understand that the data sheet is an indispensable resource for
understanding the functionality of the LaunchPad.

@node Notes
@chapter Notes
@noindent
At this point you should be getting familiar with your development environment.
This should mean less technical support problems and more focus on the
experiments.

@noindent
Be sure to connect your USB cable to the debug port on the LaunchPad. Also
confirm that the switch is in the debug position.

@noindent
Take notes of your results and observations as you proceed. These notes should
be used as you write your lab report.

@section Reference Material
@noindent
@uref{https://westminster.instructure.com/files/62246649/download?download_frd=1&verifier=hkiu21FqwDA10ZbhaXkJGY4SDvWC55QpRD9xEpo7, Tiva TM4C123GH6PM Microcontroller Data Sheet}
will be referenced often in this and future labs. It is in the Canvas Files
area filed under Tiva C Series Microcontroller. The filename is
@file{tm4c123gh6pm.pdf}. Please download this file to your computer.

@noindent
Refer to the following in the TM4C data sheet.
@itemize
@item @cite{2.3.2 Stacks} on page 74.
@item @cite{2.5.4 Vector Table} on page 107.
@item @cite{2.5.7.1 Exception Entry} on page 109.
@item @cite{Register 60: General-Purpose Input/Output Run Mode Clock Gating Control (RCGCGPIO), offset 0x608} on page 340.
@end itemize

@node Experiments
@chapter Experiments
@noindent
Download the three lab 2 zip files in the Canvas files area from the Labs folder.
@itemize
@item @uref{https://westminster.instructure.com/files/64182342/download?download_frd=1&verifier=tERLn6srBkz2KQelpCFvvU17FgnLO1bUNUcxzo9P, Lab 2 Project Part 1}.
@item @uref{https://westminster.instructure.com/files/64182346/download?download_frd=1&verifier=lkAMjxlTsFRCENwPWLutSEwKv2n4yaOyB6VulHSE, Lab 2 Project Part 2}.
@item @uref{https://westminster.instructure.com/files/64182347/download?download_frd=1&verifier=bYgIN1a8rOCURvDR1ck5m5JmM3LpXAgcqVg7KoHv, Lab 2 Project Part 3}.
@end itemize
They are zip files that will extract into their own directories. Each is an IAR
Embedded Workbench project. They have only minor differences.
Choose a location and extract the projects.

@noindent
Review the code. It is well commented. Notice the familiar parts from
@uref{https://westminster.instructure.com/courses/1487106/files/folder/Labs?preview=63874338,Lab 1}.
You should recognize the first two items in the vector table from the project
in lab 1. The stack pointer is now set just a bit differently but it is still
the same value.

@noindent
Notice the new entries in the vector table. Refer to the data sheet for a list
of processor exceptions. Each of the symbols is resolved to a memory location
by the linker at compile time. Each one of the fault handlers is attached to a
single instruction @code{B .} that loops forever.

@section Generic Fault Handler
@noindent
Start the IAR Embedded Workbench by double-clicking on the @file{workspace.eww}
file. Build the executable and then download and debug. Execution will stop at
the location of @code{main}.

@noindent
Carefully review the data sheet @cite{2.5.7.1 Exception Entry} section to
familiarize yourself with the process of context switching on interrupt
handling. Note the contents of your registers in the register view.

@noindent
Single step through the code until the processor exception is triggered. Step
into the fault handler. Again note the contents of your registers in the
register view. In particular, note the value of the @code{SP} register.

@noindent
In the memory view, click into the @emph{Go To} field and enter the value of
the @code{SP} register. This is known as the top of the stack. Compare the
contents of the stack in RAM with the register contents of your registers
you noted prior to the processor exception being triggered. @emph{Report
what you learned here in your lab report. Include your observations.}

@noindent
Read the data sheet @cite{2.3.2 Stacks} section to understand how the processor
uses the stack.

@section Create HardFault Handler
@noindent
Switch to the Lab 2-02 project. Compile the project. Then download and debug.
Execution will stop at @code{main}. Leave it there for now.

@noindent
Carefully review @cite{2.5.4 Vector Table} on page 107 of the data sheet. In
the disassembly view, scroll up to the beginning of flash memory. You will be
looking for the vector table. The IAR Embedded Workbench will helpfully have
put each of the labels next to the value in each 4-byte location.
Make a note of each 4-byte value in the vector table that corresponds to the
vector table in your source code. You will begin with the Stack Pointer at
@code{0x0000}, Reset at @code{0x0004}, etc@dots{} @emph{Include this table in your
lab report.}

@noindent
Note at this point that each of the entries in the vector table that correspond
to fault handlers are pointing to the same location in memory. We will change
that. Stop debugging.

@noindent
To illustrate how the processor handles interrupts using the vector table,
break out @code{HardFault_Handler} from the other fault handlers that are
all grouped together. The following diff shows how it is done:

@noindent
Rebuild your code. Then download and debug. Single-step through the code in the
disassembly window until the hard fault is once again triggered. The new
@code{HardFault_Handler} code should now be executing. @emph{Does this confirm the
function of the vector table?}

@noindent
Stop debugging. Close IAR Embedded Workbench.

@section Run Mode Clock Gating
@noindent
Switch to the lab 2-03 project. Compile the project. Then download and debug.
Execution will stop at @code{main}. Leave it there for now.

@noindent
Carefully review the new code. Note the instruction that is commented with
``Replace this with the correct value.'' You will be reading the data sheet and
determining the value to use in that @code{MOVS} operand.

@noindent
Study the RCGCGPIO register description On page 340 of the TM4C data sheet.
This describes how to enable GPIO Port F. Once you understand how to program
the RCGCGPIO register to enable GPIO Port F, return to your program and enter
that value in place of @code{0x00} on the line referenced above. @emph{Be
sure to include a summary of this process in your lab report.}

@noindent
Rebuild your code. Then download and debug. Single-step through the code in the
disassembly window until you reach the @code{STR} instruction with the comment
``In memory view, goto 0x40025000 before execute.'' Before continuing in
the debugger, go to the memory view, click inside the @emph{Go To} field and
enter @code{0x40025000}.

@noindent
Now click step-into and execute the @code{STR R1, [R0]} instruction while
observing the memory view window. @emph{What happens?}

@noindent
Continue single stepping through your code in the disassembly view until you
return to the @code{CauseMemFault} section of code. Watch carefully as you
single step through the code. @emph{What happens?}


@node Lab Report
@chapter Lab Report
@noindent
In the experiments sections above there are questions to be answered and
directions to be followed in writing your lab report. Be sure that you have
read through the experiments carefully, have taken notes, and have not
missed anything.

@noindent
Write a lab report that explains what you did and learned. Explain how the
processor is designed to handle fault conditions. Explain the vector table.
How does the stack work. What is context switching? What is the point of
context switching and how does it work?

@noindent
Finishing off with clock gating sets the stage for the next lab. You should
now understand why the hard fault was caused in the first two experiments
but not in the last. Explain this in your lab report.

@noindent
And, as always, let's keep the focus on the subject of Computer Architecture.
How does this lab relate to Computer Architecture?

@bye
